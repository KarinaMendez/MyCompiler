// Generated from scanner/DecafScanner.g by ANTLR 4.4

	package compiler.scanner;

import org.antlr.v4.runtime.Lexer;
import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.TokenStream;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.misc.*;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class DecafScanner extends Lexer {
	static { RuntimeMetaData.checkVersion("4.4", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		WS=1, NL=2, TAB=3, STRING=4, PLUS=5, MULT=6, DIV=7, SUB=8, AND=9, OR=10, 
		EQ=11, PER=12, MAY=13, MEN=14, MAEQ=15, MEEQ=16, EQQ=17, NOEQ=18, ANDD=19, 
		ORR=20, EXP=21, PLEQ=22, MIEQ=23, NO=24, INT=25, BOO=26, FLOAT=27, IF=28, 
		FOR=29, WHILE=30, RETURN=31, BREAK=32, VOID=33, CALLOUT=34, CONTINUE=35, 
		ELSE=36, AF=37, COMA=38, COLON=39, SEMICOLON=40, BRACE=41, BRACE2=42, 
		BRAKET=43, BRAKET2=44, PUNTOYCOMA=45, PARENTESIS=46, PARENTESIS2=47, ENTEROS=48, 
		ALPHA=49, FLOTANTES=50, HEX=51, CHAR=52, BOOLEANS=53, VARIABLES=54;
	public static String[] modeNames = {
		"DEFAULT_MODE"
	};

	public static final String[] tokenNames = {
		"'\\u0000'", "'\\u0001'", "'\\u0002'", "'\\u0003'", "'\\u0004'", "'\\u0005'", 
		"'\\u0006'", "'\\u0007'", "'\b'", "'\t'", "'\n'", "'\\u000B'", "'\f'", 
		"'\r'", "'\\u000E'", "'\\u000F'", "'\\u0010'", "'\\u0011'", "'\\u0012'", 
		"'\\u0013'", "'\\u0014'", "'\\u0015'", "'\\u0016'", "'\\u0017'", "'\\u0018'", 
		"'\\u0019'", "'\\u001A'", "'\\u001B'", "'\\u001C'", "'\\u001D'", "'\\u001E'", 
		"'\\u001F'", "' '", "'!'", "'\"'", "'#'", "'$'", "'%'", "'&'", "'''", 
		"'('", "')'", "'*'", "'+'", "','", "'-'", "'.'", "'/'", "'0'", "'1'", 
		"'2'", "'3'", "'4'", "'5'", "'6'"
	};
	public static final String[] ruleNames = {
		"WS", "NL", "TAB", "STRING", "PLUS", "MULT", "DIV", "SUB", "AND", "OR", 
		"EQ", "PER", "MAY", "MEN", "MAEQ", "MEEQ", "EQQ", "NOEQ", "ANDD", "ORR", 
		"EXP", "PLEQ", "MIEQ", "NO", "INT", "BOO", "FLOAT", "IF", "FOR", "WHILE", 
		"RETURN", "BREAK", "VOID", "CALLOUT", "CONTINUE", "ELSE", "AF", "COMA", 
		"COLON", "SEMICOLON", "BRACE", "BRACE2", "BRAKET", "BRAKET2", "PUNTOYCOMA", 
		"PARENTESIS", "PARENTESIS2", "ENTEROS", "ALPHA", "FLOTANTES", "HEX", "CHAR", 
		"BOOLEANS", "VARIABLES"
	};


	public DecafScanner(CharStream input) {
		super(input);
		_interp = new LexerATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@Override
	public String getGrammarFileName() { return "DecafScanner.g"; }

	@Override
	public String[] getTokenNames() { return tokenNames; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public String[] getModeNames() { return modeNames; }

	@Override
	public ATN getATN() { return _ATN; }

	public static final String _serializedATN =
		"\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\28\u013f\b\1\4\2\t"+
		"\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13"+
		"\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"+
		"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31\t\31"+
		"\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!"+
		"\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4"+
		",\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t"+
		"\64\4\65\t\65\4\66\t\66\4\67\t\67\3\2\3\2\3\2\3\2\3\3\3\3\3\4\3\4\3\4"+
		"\3\4\3\5\3\5\7\5|\n\5\f\5\16\5\177\13\5\3\5\3\5\3\6\3\6\3\7\3\7\3\b\3"+
		"\b\3\t\3\t\3\n\3\n\3\13\3\13\3\f\3\f\3\r\3\r\3\16\3\16\3\17\3\17\3\20"+
		"\3\20\3\20\3\21\3\21\3\21\3\22\3\22\3\22\3\23\3\23\3\23\3\24\3\24\3\24"+
		"\3\25\3\25\3\25\3\26\3\26\3\27\3\27\3\27\3\30\3\30\3\30\3\31\3\31\3\32"+
		"\3\32\3\32\3\32\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\34\3\34\3\34"+
		"\3\34\3\34\3\34\3\35\3\35\3\35\3\36\3\36\3\36\3\36\3\37\3\37\3\37\3\37"+
		"\3\37\3\37\3 \3 \3 \3 \3 \3 \3 \3!\3!\3!\3!\3!\3!\3\"\3\"\3\"\3\"\3\""+
		"\3#\3#\3#\3#\3#\3#\3#\3#\3$\3$\3$\3$\3$\3$\3$\3$\3$\3%\3%\3%\3%\3%\3&"+
		"\3&\3\'\3\'\3(\3(\3)\3)\3*\3*\3+\3+\3,\3,\3-\3-\3.\3.\3/\3/\3\60\3\60"+
		"\3\61\6\61\u0111\n\61\r\61\16\61\u0112\3\62\3\62\3\63\6\63\u0118\n\63"+
		"\r\63\16\63\u0119\3\63\3\63\6\63\u011e\n\63\r\63\16\63\u011f\3\64\3\64"+
		"\3\64\3\64\6\64\u0126\n\64\r\64\16\64\u0127\3\65\3\65\3\65\3\65\3\66\3"+
		"\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\5\66\u0137\n\66\3\67\3\67\7\67"+
		"\u013b\n\67\f\67\16\67\u013e\13\67\2\28\3\3\5\4\7\5\t\6\13\7\r\b\17\t"+
		"\21\n\23\13\25\f\27\r\31\16\33\17\35\20\37\21!\22#\23%\24\'\25)\26+\27"+
		"-\30/\31\61\32\63\33\65\34\67\359\36;\37= ?!A\"C#E$G%I&K\'M(O)Q*S+U,W"+
		"-Y.[/]\60_\61a\62c\63e\64g\65i\66k\67m8\3\2\7\3\2$$\4\2CHch\4\2C\\c|\5"+
		"\2\62;CHch\5\2\62;C\\c|\u0145\2\3\3\2\2\2\2\5\3\2\2\2\2\7\3\2\2\2\2\t"+
		"\3\2\2\2\2\13\3\2\2\2\2\r\3\2\2\2\2\17\3\2\2\2\2\21\3\2\2\2\2\23\3\2\2"+
		"\2\2\25\3\2\2\2\2\27\3\2\2\2\2\31\3\2\2\2\2\33\3\2\2\2\2\35\3\2\2\2\2"+
		"\37\3\2\2\2\2!\3\2\2\2\2#\3\2\2\2\2%\3\2\2\2\2\'\3\2\2\2\2)\3\2\2\2\2"+
		"+\3\2\2\2\2-\3\2\2\2\2/\3\2\2\2\2\61\3\2\2\2\2\63\3\2\2\2\2\65\3\2\2\2"+
		"\2\67\3\2\2\2\29\3\2\2\2\2;\3\2\2\2\2=\3\2\2\2\2?\3\2\2\2\2A\3\2\2\2\2"+
		"C\3\2\2\2\2E\3\2\2\2\2G\3\2\2\2\2I\3\2\2\2\2K\3\2\2\2\2M\3\2\2\2\2O\3"+
		"\2\2\2\2Q\3\2\2\2\2S\3\2\2\2\2U\3\2\2\2\2W\3\2\2\2\2Y\3\2\2\2\2[\3\2\2"+
		"\2\2]\3\2\2\2\2_\3\2\2\2\2a\3\2\2\2\2c\3\2\2\2\2e\3\2\2\2\2g\3\2\2\2\2"+
		"i\3\2\2\2\2k\3\2\2\2\2m\3\2\2\2\3o\3\2\2\2\5s\3\2\2\2\7u\3\2\2\2\ty\3"+
		"\2\2\2\13\u0082\3\2\2\2\r\u0084\3\2\2\2\17\u0086\3\2\2\2\21\u0088\3\2"+
		"\2\2\23\u008a\3\2\2\2\25\u008c\3\2\2\2\27\u008e\3\2\2\2\31\u0090\3\2\2"+
		"\2\33\u0092\3\2\2\2\35\u0094\3\2\2\2\37\u0096\3\2\2\2!\u0099\3\2\2\2#"+
		"\u009c\3\2\2\2%\u009f\3\2\2\2\'\u00a2\3\2\2\2)\u00a5\3\2\2\2+\u00a8\3"+
		"\2\2\2-\u00aa\3\2\2\2/\u00ad\3\2\2\2\61\u00b0\3\2\2\2\63\u00b2\3\2\2\2"+
		"\65\u00b6\3\2\2\2\67\u00be\3\2\2\29\u00c4\3\2\2\2;\u00c7\3\2\2\2=\u00cb"+
		"\3\2\2\2?\u00d1\3\2\2\2A\u00d8\3\2\2\2C\u00de\3\2\2\2E\u00e3\3\2\2\2G"+
		"\u00eb\3\2\2\2I\u00f4\3\2\2\2K\u00f9\3\2\2\2M\u00fb\3\2\2\2O\u00fd\3\2"+
		"\2\2Q\u00ff\3\2\2\2S\u0101\3\2\2\2U\u0103\3\2\2\2W\u0105\3\2\2\2Y\u0107"+
		"\3\2\2\2[\u0109\3\2\2\2]\u010b\3\2\2\2_\u010d\3\2\2\2a\u0110\3\2\2\2c"+
		"\u0114\3\2\2\2e\u0117\3\2\2\2g\u0121\3\2\2\2i\u0129\3\2\2\2k\u0136\3\2"+
		"\2\2m\u0138\3\2\2\2op\7\"\2\2pq\3\2\2\2qr\b\2\2\2r\4\3\2\2\2st\7\f\2\2"+
		"t\6\3\2\2\2uv\7\13\2\2vw\3\2\2\2wx\b\4\2\2x\b\3\2\2\2y}\7$\2\2z|\n\2\2"+
		"\2{z\3\2\2\2|\177\3\2\2\2}{\3\2\2\2}~\3\2\2\2~\u0080\3\2\2\2\177}\3\2"+
		"\2\2\u0080\u0081\7$\2\2\u0081\n\3\2\2\2\u0082\u0083\7-\2\2\u0083\f\3\2"+
		"\2\2\u0084\u0085\7,\2\2\u0085\16\3\2\2\2\u0086\u0087\7\61\2\2\u0087\20"+
		"\3\2\2\2\u0088\u0089\7/\2\2\u0089\22\3\2\2\2\u008a\u008b\7(\2\2\u008b"+
		"\24\3\2\2\2\u008c\u008d\7~\2\2\u008d\26\3\2\2\2\u008e\u008f\7?\2\2\u008f"+
		"\30\3\2\2\2\u0090\u0091\7\'\2\2\u0091\32\3\2\2\2\u0092\u0093\7@\2\2\u0093"+
		"\34\3\2\2\2\u0094\u0095\7>\2\2\u0095\36\3\2\2\2\u0096\u0097\7@\2\2\u0097"+
		"\u0098\7?\2\2\u0098 \3\2\2\2\u0099\u009a\7>\2\2\u009a\u009b\7?\2\2\u009b"+
		"\"\3\2\2\2\u009c\u009d\7?\2\2\u009d\u009e\7?\2\2\u009e$\3\2\2\2\u009f"+
		"\u00a0\7#\2\2\u00a0\u00a1\7?\2\2\u00a1&\3\2\2\2\u00a2\u00a3\7(\2\2\u00a3"+
		"\u00a4\7(\2\2\u00a4(\3\2\2\2\u00a5\u00a6\7~\2\2\u00a6\u00a7\7~\2\2\u00a7"+
		"*\3\2\2\2\u00a8\u00a9\7`\2\2\u00a9,\3\2\2\2\u00aa\u00ab\7-\2\2\u00ab\u00ac"+
		"\7?\2\2\u00ac.\3\2\2\2\u00ad\u00ae\7/\2\2\u00ae\u00af\7?\2\2\u00af\60"+
		"\3\2\2\2\u00b0\u00b1\7#\2\2\u00b1\62\3\2\2\2\u00b2\u00b3\7k\2\2\u00b3"+
		"\u00b4\7p\2\2\u00b4\u00b5\7v\2\2\u00b5\64\3\2\2\2\u00b6\u00b7\7d\2\2\u00b7"+
		"\u00b8\7q\2\2\u00b8\u00b9\7q\2\2\u00b9\u00ba\7n\2\2\u00ba\u00bb\7g\2\2"+
		"\u00bb\u00bc\7c\2\2\u00bc\u00bd\7p\2\2\u00bd\66\3\2\2\2\u00be\u00bf\7"+
		"h\2\2\u00bf\u00c0\7n\2\2\u00c0\u00c1\7q\2\2\u00c1\u00c2\7c\2\2\u00c2\u00c3"+
		"\7v\2\2\u00c38\3\2\2\2\u00c4\u00c5\7k\2\2\u00c5\u00c6\7h\2\2\u00c6:\3"+
		"\2\2\2\u00c7\u00c8\7h\2\2\u00c8\u00c9\7q\2\2\u00c9\u00ca\7t\2\2\u00ca"+
		"<\3\2\2\2\u00cb\u00cc\7y\2\2\u00cc\u00cd\7j\2\2\u00cd\u00ce\7k\2\2\u00ce"+
		"\u00cf\7n\2\2\u00cf\u00d0\7g\2\2\u00d0>\3\2\2\2\u00d1\u00d2\7t\2\2\u00d2"+
		"\u00d3\7g\2\2\u00d3\u00d4\7v\2\2\u00d4\u00d5\7w\2\2\u00d5\u00d6\7t\2\2"+
		"\u00d6\u00d7\7p\2\2\u00d7@\3\2\2\2\u00d8\u00d9\7d\2\2\u00d9\u00da\7t\2"+
		"\2\u00da\u00db\7g\2\2\u00db\u00dc\7c\2\2\u00dc\u00dd\7m\2\2\u00ddB\3\2"+
		"\2\2\u00de\u00df\7x\2\2\u00df\u00e0\7q\2\2\u00e0\u00e1\7k\2\2\u00e1\u00e2"+
		"\7f\2\2\u00e2D\3\2\2\2\u00e3\u00e4\7e\2\2\u00e4\u00e5\7c\2\2\u00e5\u00e6"+
		"\7n\2\2\u00e6\u00e7\7n\2\2\u00e7\u00e8\7q\2\2\u00e8\u00e9\7w\2\2\u00e9"+
		"\u00ea\7v\2\2\u00eaF\3\2\2\2\u00eb\u00ec\7e\2\2\u00ec\u00ed\7q\2\2\u00ed"+
		"\u00ee\7p\2\2\u00ee\u00ef\7v\2\2\u00ef\u00f0\7k\2\2\u00f0\u00f1\7p\2\2"+
		"\u00f1\u00f2\7w\2\2\u00f2\u00f3\7g\2\2\u00f3H\3\2\2\2\u00f4\u00f5\7g\2"+
		"\2\u00f5\u00f6\7n\2\2\u00f6\u00f7\7u\2\2\u00f7\u00f8\7g\2\2\u00f8J\3\2"+
		"\2\2\u00f9\u00fa\t\3\2\2\u00faL\3\2\2\2\u00fb\u00fc\7.\2\2\u00fcN\3\2"+
		"\2\2\u00fd\u00fe\7<\2\2\u00feP\3\2\2\2\u00ff\u0100\7=\2\2\u0100R\3\2\2"+
		"\2\u0101\u0102\7}\2\2\u0102T\3\2\2\2\u0103\u0104\7\177\2\2\u0104V\3\2"+
		"\2\2\u0105\u0106\7]\2\2\u0106X\3\2\2\2\u0107\u0108\7_\2\2\u0108Z\3\2\2"+
		"\2\u0109\u010a\7=\2\2\u010a\\\3\2\2\2\u010b\u010c\7*\2\2\u010c^\3\2\2"+
		"\2\u010d\u010e\7+\2\2\u010e`\3\2\2\2\u010f\u0111\4\62;\2\u0110\u010f\3"+
		"\2\2\2\u0111\u0112\3\2\2\2\u0112\u0110\3\2\2\2\u0112\u0113\3\2\2\2\u0113"+
		"b\3\2\2\2\u0114\u0115\t\4\2\2\u0115d\3\2\2\2\u0116\u0118\4\62;\2\u0117"+
		"\u0116\3\2\2\2\u0118\u0119\3\2\2\2\u0119\u0117\3\2\2\2\u0119\u011a\3\2"+
		"\2\2\u011a\u011b\3\2\2\2\u011b\u011d\7\60\2\2\u011c\u011e\4\62;\2\u011d"+
		"\u011c\3\2\2\2\u011e\u011f\3\2\2\2\u011f\u011d\3\2\2\2\u011f\u0120\3\2"+
		"\2\2\u0120f\3\2\2\2\u0121\u0122\7\62\2\2\u0122\u0123\7z\2\2\u0123\u0125"+
		"\3\2\2\2\u0124\u0126\t\5\2\2\u0125\u0124\3\2\2\2\u0126\u0127\3\2\2\2\u0127"+
		"\u0125\3\2\2\2\u0127\u0128\3\2\2\2\u0128h\3\2\2\2\u0129\u012a\7)\2\2\u012a"+
		"\u012b\13\2\2\2\u012b\u012c\7)\2\2\u012cj\3\2\2\2\u012d\u012e\7v\2\2\u012e"+
		"\u012f\7t\2\2\u012f\u0130\7w\2\2\u0130\u0137\7g\2\2\u0131\u0132\7h\2\2"+
		"\u0132\u0133\7c\2\2\u0133\u0134\7n\2\2\u0134\u0135\7u\2\2\u0135\u0137"+
		"\7g\2\2\u0136\u012d\3\2\2\2\u0136\u0131\3\2\2\2\u0137l\3\2\2\2\u0138\u013c"+
		"\t\4\2\2\u0139\u013b\t\6\2\2\u013a\u0139\3\2\2\2\u013b\u013e\3\2\2\2\u013c"+
		"\u013a\3\2\2\2\u013c\u013d\3\2\2\2\u013dn\3\2\2\2\u013e\u013c\3\2\2\2"+
		"\13\2}\u0112\u0119\u011f\u0127\u0136\u013a\u013c\3\b\2\2";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}